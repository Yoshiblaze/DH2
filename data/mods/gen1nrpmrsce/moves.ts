export const Moves: {[k: string]: ModdedMoveData} = {
	taunt: {
		num: 269,
		shortDesc: "Target can't use status moves its next 2 turns.",
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Taunt",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		volatileStatus: 'taunt',
		condition: {
			duration: 2,
			onStart(target) {
				if (target.activeTurns && !this.queue.willMove(target)) {
					this.effectState.duration++;
				}
				this.add('-start', target, 'move: Taunt');
			},
			onResidualOrder: 12,
			onEnd(target) {
				this.add('-end', target, 'move: Taunt');
			},
			onDisableMove(pokemon) {
				for (const moveSlot of pokemon.moveSlots) {
					const move = this.dex.moves.get(moveSlot.id);
					if (move.category === 'Status' && move.id !== 'mefirst') {
						pokemon.disableMove(moveSlot.id);
					}
				}
			},
			onBeforeMovePriority: 5,
			onBeforeMove(attacker, defender, move) {
				if (!move.isZ && !move.isMax && move.category === 'Status' && move.id !== 'mefirst') {
					this.add('cant', attacker, 'move: Taunt', move);
					return false;
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Clever",
		gen: 1,
	},
	acid: {
		inherit: true,
		viable: true,
		shortDesc: "100% chance to lower the foe's Special.",
		basePower: 50,
		pp: 20,
		secondary: {
			chance: 100,
			boosts: {
				spa: -1,
				spd: -1,
			},
		},
		target: "normal",
	},
	charge: {
		num: 268,
		viable: true,
		shortDesc: "Boosts the user's Special by 1 stage.",
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Charge",
		pp: 20,
		priority: 0,
		flags: {},
		boosts: {
			spa: 1,
			spd: 1,
		},
		secondary: null,
		target: "self",
		type: "Electric",
		contestType: "Clever",
		gen: 1,
	},
	drillrun: {
		num: 529,
		shortDesc: "High critical hit ratio.",
		accuracy: 100,
		basePower: 40,
		category: "Physical",
		name: "Drill Run",
		pp: 10,
		priority: 0,
		flags: {},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Cool",
		gen: 1,
	},
	dualchop: {
		num: 530,
		viable: true,
		isNonstandard: null,
		accuracy: 90,
		basePower: 35,
		category: "Special",
		name: "Dual Chop",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, metronome: 1},
		multihit: 2,
		secondary: null,
		target: "normal",
		type: "Dragon",
		maxMove: {basePower: 130},
		contestType: "Tough",
		gen: 1,
	},
	extremespeed: {
		num: 245,
		accuracy: 100,
		basePower: 80,
		category: "Physical",
		name: "Extreme Speed",
		pp: 10,
		priority: 1,
		flags: {contact: 1, protect: 1, mirror: 1, metronome: 1},
		secondary: null,
		target: "normal",
		type: "Normal",
		contestType: "Cool",
		gen: 1,
	},
	gust: {
		inherit: true,
		type: "Flying",
	},
	howl: {
		num: 336,
		viable: true,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Howl",
		pp: 20,
		priority: 0,
		flags: {snatch: 1, sound: 1, metronome: 1},
		boosts: {
			atk: 1,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {atk: 1}},
		contestType: "Cool",
		gen: 1,
	},
	karatechop: {
		inherit: true,
		viable: true,
		basePower: 35,
		pp: 20,
		critRatio: 2,
		type: "Fighting",
	},
	leechlife: {
		inherit: true,
		viable: true,
		basePower: 40,
		pp: 10,
	},
	rockthrow: {
		inherit: true,
		viable: true,
		shortDesc: "33% chance to lower the foe's Defense by 1 stage.",
		accuracy: 90,
		secondary: {
			chance: 33,
			boosts: {
				def: -1,
			},
		},
	},
	shadowpunch: {
		num: 325,
		viable: true,
		accuracy: true,
		basePower: 60,
		category: "Physical",
		name: "Shadow Punch",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, metronome: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
		gen: 1,
	},
	sludge: {
		inherit: true,
		shortDesc: "33% chance to poison the foe.",
		basePower: 75,
		pp: 20,
		secondary: {
			chance: 33,
			status: 'psn',
		},
	},
	stompingtantrum: {
		num: 707,
		shortDesc: "No additional effect.",
		accuracy: 100,
		basePower: 75,
		category: "Physical",
		name: "Stomping Tantrum",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, metronome: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Tough",
		gen: 1,
	},
	willowisp: {
		num: 261,
		shortDesc: "Burns the foe.",
		accuracy: 90,
		basePower: 0,
		category: "Status",
		name: "Will-O-Wisp",
		pp: 10,
		priority: 0,
		flags: {},
		status: 'brn',
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
		gen: 1,
	},
	wingattack: {
		inherit: true,
		viable: true,
		basePower: 60,
	},
	airslash: {
		num: 403,
		viable: true,
		shortDesc: "High critical hit ratio.",
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		name: "Air Slash",
		pp: 20,
		priority: 0,
		flags: {},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Cool",
		gen: 1,
	},
	drainpunch: {
		num: 409,
		viable: true,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		name: "Drain Punch",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1, heal: 1, metronome: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Tough",
		gen: 1,
	},
	eerieimpulse: {
		num: 598,
		viable: true,
		shortDesc: "Lowers the target's Special by 2 stages.",
		accuracy: 100,
		basePower: 0,
		category: "Status",
		name: "Eerie Impulse",
		pp: 20,
		priority: 0,
		flags: {reflectable: 1},
		boosts: {
			spa: -2,
			spd: -2,
		},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Cute",
		gen: 1,
	},
	highjumpkick: {
		inherit: true,
		accuracy: 75,
		basePower: 100,
		onMoveFail(target, source, move) {
			this.directDamage(1, source, target);
		},
	},
	infestation: {
		num: 611,
		viable: true,
		shortDesc: "Prevents the target from moving for 2-5 turns.",
		accuracy: 85,
		basePower: 15,
		category: "Physical",
		name: "Infestation",
		pp: 15,
		priority: 0,
		flags: {},
		volatileStatus: 'partiallytrapped',
		self: {
			volatileStatus: 'partialtrappinglock',
		},
		onBeforeMove(pokemon, target, move) {
			// Removes must recharge volatile even if it misses
			target.removeVolatile('mustrecharge');
		},
		onHit(target, source) {
			/**
			 * The duration of the partially trapped must be always renewed to 2
			 * so target doesn't move on trapper switch out as happens in gen 1.
			 * However, this won't happen if there's no switch and the trapper is
			 * about to end its partial trapping.
			 **/
			if (target.volatiles['partiallytrapped']) {
				if (source.volatiles['partialtrappinglock'] && source.volatiles['partialtrappinglock'].duration > 1) {
					target.volatiles['partiallytrapped'].duration = 2;
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Clever",
		gen: 1,
	},
	lockon: {
		num: 199,
		shortDesc: "Boosts the user's Accuracy by 2 stages.",
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Lock-On",
		pp: 30,
		priority: 0,
		flags: {mirror: 1, metronome: 1},
		boosts: {
			accuracy: 2,
		},
		secondary: null,
		target: "self",
		type: "Normal",
		zMove: {boost: {spe: 1}},
		contestType: "Clever",
		gen: 1,
	},
	overheat: {
		num: 315,
		shortDesc: "Lowers the user's Special by 2 stages after use.",
		accuracy: 90,
		basePower: 140,
		category: "Special",
		name: "Overheat",
		pp: 5,
		priority: 0,
		flags: {},
		self: {
			boosts: {
				spa: -2,
				spd: -2,
			},
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Beautiful",
		gen: 1,
	},
	roost: {
		num: 355,
		accuracy: true,
		basePower: 0,
		category: "Status",
		name: "Roost",
		pp: 10,
		priority: 0,
		flags: {snatch: 1, heal: 1, metronome: 1},
		heal: [1, 2],
		secondary: null,
		target: "self",
		type: "Flying",
		zMove: {effect: 'clearnegativeboost'},
		contestType: "Cute",
		gen: 1,
	},
	snipeshot: {
		num: 745,
		viable: true,
		shortDesc: "High critical hit ratio.",
		accuracy: 100,
		basePower: 70,
		category: "Special",
		name: "Snipe Shot",
		pp: 20,
		priority: 0,
		flags: {},
		critRatio: 2,
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Cool",
		gen: 1,
	},
};
